
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Application
 * 
 */
export type Application = $Result.DefaultSelection<Prisma.$ApplicationPayload>
/**
 * Model MetaAi
 * 
 */
export type MetaAi = $Result.DefaultSelection<Prisma.$MetaAiPayload>
/**
 * Model Artikel
 * 
 */
export type Artikel = $Result.DefaultSelection<Prisma.$ArtikelPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Type: {
  keywords: 'keywords',
  description: 'description'
};

export type Type = (typeof Type)[keyof typeof Type]


export const isDownloaded: {
  yes: 'yes',
  no: 'no'
};

export type isDownloaded = (typeof isDownloaded)[keyof typeof isDownloaded]

}

export type Type = $Enums.Type

export const Type: typeof $Enums.Type

export type isDownloaded = $Enums.isDownloaded

export const isDownloaded: typeof $Enums.isDownloaded

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Applications
 * const applications = await prisma.application.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Applications
   * const applications = await prisma.application.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.application`: Exposes CRUD operations for the **Application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.ApplicationDelegate<ExtArgs>;

  /**
   * `prisma.metaAi`: Exposes CRUD operations for the **MetaAi** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MetaAis
    * const metaAis = await prisma.metaAi.findMany()
    * ```
    */
  get metaAi(): Prisma.MetaAiDelegate<ExtArgs>;

  /**
   * `prisma.artikel`: Exposes CRUD operations for the **Artikel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Artikels
    * const artikels = await prisma.artikel.findMany()
    * ```
    */
  get artikel(): Prisma.ArtikelDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.9.1
   * Query Engine version: 23fdc5965b1e05fc54e5f26ed3de66776b93de64
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Application: 'Application',
    MetaAi: 'MetaAi',
    Artikel: 'Artikel'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'application' | 'metaAi' | 'artikel'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Application: {
        payload: Prisma.$ApplicationPayload<ExtArgs>
        fields: Prisma.ApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findFirst: {
            args: Prisma.ApplicationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findMany: {
            args: Prisma.ApplicationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          create: {
            args: Prisma.ApplicationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          createMany: {
            args: Prisma.ApplicationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ApplicationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          update: {
            args: Prisma.ApplicationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ApplicationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          aggregate: {
            args: Prisma.ApplicationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateApplication>
          }
          groupBy: {
            args: Prisma.ApplicationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationCountArgs<ExtArgs>,
            result: $Utils.Optional<ApplicationCountAggregateOutputType> | number
          }
        }
      }
      MetaAi: {
        payload: Prisma.$MetaAiPayload<ExtArgs>
        fields: Prisma.MetaAiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MetaAiFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetaAiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MetaAiFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetaAiPayload>
          }
          findFirst: {
            args: Prisma.MetaAiFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetaAiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MetaAiFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetaAiPayload>
          }
          findMany: {
            args: Prisma.MetaAiFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetaAiPayload>[]
          }
          create: {
            args: Prisma.MetaAiCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetaAiPayload>
          }
          createMany: {
            args: Prisma.MetaAiCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MetaAiDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetaAiPayload>
          }
          update: {
            args: Prisma.MetaAiUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetaAiPayload>
          }
          deleteMany: {
            args: Prisma.MetaAiDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MetaAiUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MetaAiUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MetaAiPayload>
          }
          aggregate: {
            args: Prisma.MetaAiAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMetaAi>
          }
          groupBy: {
            args: Prisma.MetaAiGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MetaAiGroupByOutputType>[]
          }
          count: {
            args: Prisma.MetaAiCountArgs<ExtArgs>,
            result: $Utils.Optional<MetaAiCountAggregateOutputType> | number
          }
        }
      }
      Artikel: {
        payload: Prisma.$ArtikelPayload<ExtArgs>
        fields: Prisma.ArtikelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArtikelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtikelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArtikelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtikelPayload>
          }
          findFirst: {
            args: Prisma.ArtikelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtikelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArtikelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtikelPayload>
          }
          findMany: {
            args: Prisma.ArtikelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtikelPayload>[]
          }
          create: {
            args: Prisma.ArtikelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtikelPayload>
          }
          createMany: {
            args: Prisma.ArtikelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ArtikelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtikelPayload>
          }
          update: {
            args: Prisma.ArtikelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtikelPayload>
          }
          deleteMany: {
            args: Prisma.ArtikelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ArtikelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ArtikelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtikelPayload>
          }
          aggregate: {
            args: Prisma.ArtikelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateArtikel>
          }
          groupBy: {
            args: Prisma.ArtikelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ArtikelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArtikelCountArgs<ExtArgs>,
            result: $Utils.Optional<ArtikelCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ApplicationCountOutputType
   */

  export type ApplicationCountOutputType = {
    metaAis: number
    artikels: number
  }

  export type ApplicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metaAis?: boolean | ApplicationCountOutputTypeCountMetaAisArgs
    artikels?: boolean | ApplicationCountOutputTypeCountArtikelsArgs
  }

  // Custom InputTypes

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationCountOutputType
     */
    select?: ApplicationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountMetaAisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetaAiWhereInput
  }


  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountArtikelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtikelWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Application
   */

  export type AggregateApplication = {
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  export type ApplicationAvgAggregateOutputType = {
    id: number | null
  }

  export type ApplicationSumAggregateOutputType = {
    id: number | null
  }

  export type ApplicationMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApplicationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApplicationCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ApplicationAvgAggregateInputType = {
    id?: true
  }

  export type ApplicationSumAggregateInputType = {
    id?: true
  }

  export type ApplicationMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApplicationMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApplicationCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Application to aggregate.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applications
    **/
    _count?: true | ApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationMaxAggregateInputType
  }

  export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplication[P]>
      : GetScalarType<T[P], AggregateApplication[P]>
  }




  export type ApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithAggregationInput | ApplicationOrderByWithAggregationInput[]
    by: ApplicationScalarFieldEnum[] | ApplicationScalarFieldEnum
    having?: ApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationCountAggregateInputType | true
    _avg?: ApplicationAvgAggregateInputType
    _sum?: ApplicationSumAggregateInputType
    _min?: ApplicationMinAggregateInputType
    _max?: ApplicationMaxAggregateInputType
  }

  export type ApplicationGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metaAis?: boolean | Application$metaAisArgs<ExtArgs>
    artikels?: boolean | Application$artikelsArgs<ExtArgs>
    _count?: boolean | ApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metaAis?: boolean | Application$metaAisArgs<ExtArgs>
    artikels?: boolean | Application$artikelsArgs<ExtArgs>
    _count?: boolean | ApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Application"
    objects: {
      metaAis: Prisma.$MetaAiPayload<ExtArgs>[]
      artikels: Prisma.$ArtikelPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["application"]>
    composites: {}
  }


  type ApplicationGetPayload<S extends boolean | null | undefined | ApplicationDefaultArgs> = $Result.GetResult<Prisma.$ApplicationPayload, S>

  type ApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ApplicationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ApplicationCountAggregateInputType | true
    }

  export interface ApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Application'], meta: { name: 'Application' } }
    /**
     * Find zero or one Application that matches the filter.
     * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApplicationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationFindUniqueArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Application that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Application that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApplicationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationFindFirstArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Application that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.application.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.application.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationWithIdOnly = await prisma.application.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ApplicationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Application.
     * @param {ApplicationCreateArgs} args - Arguments to create a Application.
     * @example
     * // Create one Application
     * const Application = await prisma.application.create({
     *   data: {
     *     // ... data to create a Application
     *   }
     * })
     * 
    **/
    create<T extends ApplicationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationCreateArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Applications.
     *     @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
     *     @example
     *     // Create many Applications
     *     const application = await prisma.application.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ApplicationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Application.
     * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
     * @example
     * // Delete one Application
     * const Application = await prisma.application.delete({
     *   where: {
     *     // ... filter to delete one Application
     *   }
     * })
     * 
    **/
    delete<T extends ApplicationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationDeleteArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Application.
     * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
     * @example
     * // Update one Application
     * const application = await prisma.application.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApplicationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationUpdateArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Applications.
     * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.application.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApplicationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApplicationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Application.
     * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
     * @example
     * // Update or create a Application
     * const application = await prisma.application.upsert({
     *   create: {
     *     // ... data to create a Application
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Application we want to update
     *   }
     * })
    **/
    upsert<T extends ApplicationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationUpsertArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.application.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends ApplicationCountArgs>(
      args?: Subset<T, ApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAggregateArgs>(args: Subset<T, ApplicationAggregateArgs>): Prisma.PrismaPromise<GetApplicationAggregateType<T>>

    /**
     * Group by Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Application model
   */
  readonly fields: ApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Application.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    metaAis<T extends Application$metaAisArgs<ExtArgs> = {}>(args?: Subset<T, Application$metaAisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetaAiPayload<ExtArgs>, T, 'findMany'> | Null>;

    artikels<T extends Application$artikelsArgs<ExtArgs> = {}>(args?: Subset<T, Application$artikelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtikelPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Application model
   */ 
  interface ApplicationFieldRefs {
    readonly id: FieldRef<"Application", 'Int'>
    readonly name: FieldRef<"Application", 'String'>
    readonly createdAt: FieldRef<"Application", 'DateTime'>
    readonly updatedAt: FieldRef<"Application", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Application findUnique
   */
  export type ApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application findUniqueOrThrow
   */
  export type ApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application findFirst
   */
  export type ApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }


  /**
   * Application findFirstOrThrow
   */
  export type ApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }


  /**
   * Application findMany
   */
  export type ApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Applications to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }


  /**
   * Application create
   */
  export type ApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Application.
     */
    data: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
  }


  /**
   * Application createMany
   */
  export type ApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Application update
   */
  export type ApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Application.
     */
    data: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
    /**
     * Choose, which Application to update.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application updateMany
   */
  export type ApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
  }


  /**
   * Application upsert
   */
  export type ApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Application to update in case it exists.
     */
    where: ApplicationWhereUniqueInput
    /**
     * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
     */
    create: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
    /**
     * In case the Application was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
  }


  /**
   * Application delete
   */
  export type ApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter which Application to delete.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application deleteMany
   */
  export type ApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applications to delete
     */
    where?: ApplicationWhereInput
  }


  /**
   * Application.metaAis
   */
  export type Application$metaAisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetaAi
     */
    select?: MetaAiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetaAiInclude<ExtArgs> | null
    where?: MetaAiWhereInput
    orderBy?: MetaAiOrderByWithRelationInput | MetaAiOrderByWithRelationInput[]
    cursor?: MetaAiWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MetaAiScalarFieldEnum | MetaAiScalarFieldEnum[]
  }


  /**
   * Application.artikels
   */
  export type Application$artikelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artikel
     */
    select?: ArtikelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtikelInclude<ExtArgs> | null
    where?: ArtikelWhereInput
    orderBy?: ArtikelOrderByWithRelationInput | ArtikelOrderByWithRelationInput[]
    cursor?: ArtikelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtikelScalarFieldEnum | ArtikelScalarFieldEnum[]
  }


  /**
   * Application without action
   */
  export type ApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
  }



  /**
   * Model MetaAi
   */

  export type AggregateMetaAi = {
    _count: MetaAiCountAggregateOutputType | null
    _avg: MetaAiAvgAggregateOutputType | null
    _sum: MetaAiSumAggregateOutputType | null
    _min: MetaAiMinAggregateOutputType | null
    _max: MetaAiMaxAggregateOutputType | null
  }

  export type MetaAiAvgAggregateOutputType = {
    id: number | null
    applicationId: number | null
  }

  export type MetaAiSumAggregateOutputType = {
    id: number | null
    applicationId: number | null
  }

  export type MetaAiMinAggregateOutputType = {
    id: number | null
    type: $Enums.Type | null
    keyword: string | null
    applicationId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MetaAiMaxAggregateOutputType = {
    id: number | null
    type: $Enums.Type | null
    keyword: string | null
    applicationId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MetaAiCountAggregateOutputType = {
    id: number
    type: number
    keyword: number
    applicationId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MetaAiAvgAggregateInputType = {
    id?: true
    applicationId?: true
  }

  export type MetaAiSumAggregateInputType = {
    id?: true
    applicationId?: true
  }

  export type MetaAiMinAggregateInputType = {
    id?: true
    type?: true
    keyword?: true
    applicationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MetaAiMaxAggregateInputType = {
    id?: true
    type?: true
    keyword?: true
    applicationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MetaAiCountAggregateInputType = {
    id?: true
    type?: true
    keyword?: true
    applicationId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MetaAiAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetaAi to aggregate.
     */
    where?: MetaAiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetaAis to fetch.
     */
    orderBy?: MetaAiOrderByWithRelationInput | MetaAiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetaAiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetaAis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetaAis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MetaAis
    **/
    _count?: true | MetaAiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MetaAiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MetaAiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetaAiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetaAiMaxAggregateInputType
  }

  export type GetMetaAiAggregateType<T extends MetaAiAggregateArgs> = {
        [P in keyof T & keyof AggregateMetaAi]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetaAi[P]>
      : GetScalarType<T[P], AggregateMetaAi[P]>
  }




  export type MetaAiGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetaAiWhereInput
    orderBy?: MetaAiOrderByWithAggregationInput | MetaAiOrderByWithAggregationInput[]
    by: MetaAiScalarFieldEnum[] | MetaAiScalarFieldEnum
    having?: MetaAiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetaAiCountAggregateInputType | true
    _avg?: MetaAiAvgAggregateInputType
    _sum?: MetaAiSumAggregateInputType
    _min?: MetaAiMinAggregateInputType
    _max?: MetaAiMaxAggregateInputType
  }

  export type MetaAiGroupByOutputType = {
    id: number
    type: $Enums.Type
    keyword: string
    applicationId: number
    createdAt: Date
    updatedAt: Date
    _count: MetaAiCountAggregateOutputType | null
    _avg: MetaAiAvgAggregateOutputType | null
    _sum: MetaAiSumAggregateOutputType | null
    _min: MetaAiMinAggregateOutputType | null
    _max: MetaAiMaxAggregateOutputType | null
  }

  type GetMetaAiGroupByPayload<T extends MetaAiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetaAiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetaAiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetaAiGroupByOutputType[P]>
            : GetScalarType<T[P], MetaAiGroupByOutputType[P]>
        }
      >
    >


  export type MetaAiSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    keyword?: boolean
    applicationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metaAi"]>

  export type MetaAiSelectScalar = {
    id?: boolean
    type?: boolean
    keyword?: boolean
    applicationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MetaAiInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }


  export type $MetaAiPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MetaAi"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: $Enums.Type
      keyword: string
      applicationId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["metaAi"]>
    composites: {}
  }


  type MetaAiGetPayload<S extends boolean | null | undefined | MetaAiDefaultArgs> = $Result.GetResult<Prisma.$MetaAiPayload, S>

  type MetaAiCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MetaAiFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MetaAiCountAggregateInputType | true
    }

  export interface MetaAiDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MetaAi'], meta: { name: 'MetaAi' } }
    /**
     * Find zero or one MetaAi that matches the filter.
     * @param {MetaAiFindUniqueArgs} args - Arguments to find a MetaAi
     * @example
     * // Get one MetaAi
     * const metaAi = await prisma.metaAi.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MetaAiFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MetaAiFindUniqueArgs<ExtArgs>>
    ): Prisma__MetaAiClient<$Result.GetResult<Prisma.$MetaAiPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MetaAi that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MetaAiFindUniqueOrThrowArgs} args - Arguments to find a MetaAi
     * @example
     * // Get one MetaAi
     * const metaAi = await prisma.metaAi.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MetaAiFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MetaAiFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MetaAiClient<$Result.GetResult<Prisma.$MetaAiPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MetaAi that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetaAiFindFirstArgs} args - Arguments to find a MetaAi
     * @example
     * // Get one MetaAi
     * const metaAi = await prisma.metaAi.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MetaAiFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MetaAiFindFirstArgs<ExtArgs>>
    ): Prisma__MetaAiClient<$Result.GetResult<Prisma.$MetaAiPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MetaAi that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetaAiFindFirstOrThrowArgs} args - Arguments to find a MetaAi
     * @example
     * // Get one MetaAi
     * const metaAi = await prisma.metaAi.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MetaAiFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MetaAiFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MetaAiClient<$Result.GetResult<Prisma.$MetaAiPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MetaAis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetaAiFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MetaAis
     * const metaAis = await prisma.metaAi.findMany()
     * 
     * // Get first 10 MetaAis
     * const metaAis = await prisma.metaAi.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metaAiWithIdOnly = await prisma.metaAi.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MetaAiFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MetaAiFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetaAiPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MetaAi.
     * @param {MetaAiCreateArgs} args - Arguments to create a MetaAi.
     * @example
     * // Create one MetaAi
     * const MetaAi = await prisma.metaAi.create({
     *   data: {
     *     // ... data to create a MetaAi
     *   }
     * })
     * 
    **/
    create<T extends MetaAiCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MetaAiCreateArgs<ExtArgs>>
    ): Prisma__MetaAiClient<$Result.GetResult<Prisma.$MetaAiPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MetaAis.
     *     @param {MetaAiCreateManyArgs} args - Arguments to create many MetaAis.
     *     @example
     *     // Create many MetaAis
     *     const metaAi = await prisma.metaAi.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MetaAiCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MetaAiCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MetaAi.
     * @param {MetaAiDeleteArgs} args - Arguments to delete one MetaAi.
     * @example
     * // Delete one MetaAi
     * const MetaAi = await prisma.metaAi.delete({
     *   where: {
     *     // ... filter to delete one MetaAi
     *   }
     * })
     * 
    **/
    delete<T extends MetaAiDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MetaAiDeleteArgs<ExtArgs>>
    ): Prisma__MetaAiClient<$Result.GetResult<Prisma.$MetaAiPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MetaAi.
     * @param {MetaAiUpdateArgs} args - Arguments to update one MetaAi.
     * @example
     * // Update one MetaAi
     * const metaAi = await prisma.metaAi.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MetaAiUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MetaAiUpdateArgs<ExtArgs>>
    ): Prisma__MetaAiClient<$Result.GetResult<Prisma.$MetaAiPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MetaAis.
     * @param {MetaAiDeleteManyArgs} args - Arguments to filter MetaAis to delete.
     * @example
     * // Delete a few MetaAis
     * const { count } = await prisma.metaAi.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MetaAiDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MetaAiDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetaAis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetaAiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MetaAis
     * const metaAi = await prisma.metaAi.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MetaAiUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MetaAiUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MetaAi.
     * @param {MetaAiUpsertArgs} args - Arguments to update or create a MetaAi.
     * @example
     * // Update or create a MetaAi
     * const metaAi = await prisma.metaAi.upsert({
     *   create: {
     *     // ... data to create a MetaAi
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MetaAi we want to update
     *   }
     * })
    **/
    upsert<T extends MetaAiUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MetaAiUpsertArgs<ExtArgs>>
    ): Prisma__MetaAiClient<$Result.GetResult<Prisma.$MetaAiPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MetaAis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetaAiCountArgs} args - Arguments to filter MetaAis to count.
     * @example
     * // Count the number of MetaAis
     * const count = await prisma.metaAi.count({
     *   where: {
     *     // ... the filter for the MetaAis we want to count
     *   }
     * })
    **/
    count<T extends MetaAiCountArgs>(
      args?: Subset<T, MetaAiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetaAiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MetaAi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetaAiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetaAiAggregateArgs>(args: Subset<T, MetaAiAggregateArgs>): Prisma.PrismaPromise<GetMetaAiAggregateType<T>>

    /**
     * Group by MetaAi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetaAiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetaAiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetaAiGroupByArgs['orderBy'] }
        : { orderBy?: MetaAiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetaAiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetaAiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MetaAi model
   */
  readonly fields: MetaAiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MetaAi.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MetaAiClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MetaAi model
   */ 
  interface MetaAiFieldRefs {
    readonly id: FieldRef<"MetaAi", 'Int'>
    readonly type: FieldRef<"MetaAi", 'Type'>
    readonly keyword: FieldRef<"MetaAi", 'String'>
    readonly applicationId: FieldRef<"MetaAi", 'Int'>
    readonly createdAt: FieldRef<"MetaAi", 'DateTime'>
    readonly updatedAt: FieldRef<"MetaAi", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * MetaAi findUnique
   */
  export type MetaAiFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetaAi
     */
    select?: MetaAiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetaAiInclude<ExtArgs> | null
    /**
     * Filter, which MetaAi to fetch.
     */
    where: MetaAiWhereUniqueInput
  }


  /**
   * MetaAi findUniqueOrThrow
   */
  export type MetaAiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetaAi
     */
    select?: MetaAiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetaAiInclude<ExtArgs> | null
    /**
     * Filter, which MetaAi to fetch.
     */
    where: MetaAiWhereUniqueInput
  }


  /**
   * MetaAi findFirst
   */
  export type MetaAiFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetaAi
     */
    select?: MetaAiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetaAiInclude<ExtArgs> | null
    /**
     * Filter, which MetaAi to fetch.
     */
    where?: MetaAiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetaAis to fetch.
     */
    orderBy?: MetaAiOrderByWithRelationInput | MetaAiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetaAis.
     */
    cursor?: MetaAiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetaAis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetaAis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetaAis.
     */
    distinct?: MetaAiScalarFieldEnum | MetaAiScalarFieldEnum[]
  }


  /**
   * MetaAi findFirstOrThrow
   */
  export type MetaAiFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetaAi
     */
    select?: MetaAiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetaAiInclude<ExtArgs> | null
    /**
     * Filter, which MetaAi to fetch.
     */
    where?: MetaAiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetaAis to fetch.
     */
    orderBy?: MetaAiOrderByWithRelationInput | MetaAiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetaAis.
     */
    cursor?: MetaAiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetaAis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetaAis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetaAis.
     */
    distinct?: MetaAiScalarFieldEnum | MetaAiScalarFieldEnum[]
  }


  /**
   * MetaAi findMany
   */
  export type MetaAiFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetaAi
     */
    select?: MetaAiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetaAiInclude<ExtArgs> | null
    /**
     * Filter, which MetaAis to fetch.
     */
    where?: MetaAiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetaAis to fetch.
     */
    orderBy?: MetaAiOrderByWithRelationInput | MetaAiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MetaAis.
     */
    cursor?: MetaAiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetaAis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetaAis.
     */
    skip?: number
    distinct?: MetaAiScalarFieldEnum | MetaAiScalarFieldEnum[]
  }


  /**
   * MetaAi create
   */
  export type MetaAiCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetaAi
     */
    select?: MetaAiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetaAiInclude<ExtArgs> | null
    /**
     * The data needed to create a MetaAi.
     */
    data: XOR<MetaAiCreateInput, MetaAiUncheckedCreateInput>
  }


  /**
   * MetaAi createMany
   */
  export type MetaAiCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MetaAis.
     */
    data: MetaAiCreateManyInput | MetaAiCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MetaAi update
   */
  export type MetaAiUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetaAi
     */
    select?: MetaAiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetaAiInclude<ExtArgs> | null
    /**
     * The data needed to update a MetaAi.
     */
    data: XOR<MetaAiUpdateInput, MetaAiUncheckedUpdateInput>
    /**
     * Choose, which MetaAi to update.
     */
    where: MetaAiWhereUniqueInput
  }


  /**
   * MetaAi updateMany
   */
  export type MetaAiUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MetaAis.
     */
    data: XOR<MetaAiUpdateManyMutationInput, MetaAiUncheckedUpdateManyInput>
    /**
     * Filter which MetaAis to update
     */
    where?: MetaAiWhereInput
  }


  /**
   * MetaAi upsert
   */
  export type MetaAiUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetaAi
     */
    select?: MetaAiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetaAiInclude<ExtArgs> | null
    /**
     * The filter to search for the MetaAi to update in case it exists.
     */
    where: MetaAiWhereUniqueInput
    /**
     * In case the MetaAi found by the `where` argument doesn't exist, create a new MetaAi with this data.
     */
    create: XOR<MetaAiCreateInput, MetaAiUncheckedCreateInput>
    /**
     * In case the MetaAi was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetaAiUpdateInput, MetaAiUncheckedUpdateInput>
  }


  /**
   * MetaAi delete
   */
  export type MetaAiDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetaAi
     */
    select?: MetaAiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetaAiInclude<ExtArgs> | null
    /**
     * Filter which MetaAi to delete.
     */
    where: MetaAiWhereUniqueInput
  }


  /**
   * MetaAi deleteMany
   */
  export type MetaAiDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetaAis to delete
     */
    where?: MetaAiWhereInput
  }


  /**
   * MetaAi without action
   */
  export type MetaAiDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetaAi
     */
    select?: MetaAiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetaAiInclude<ExtArgs> | null
  }



  /**
   * Model Artikel
   */

  export type AggregateArtikel = {
    _count: ArtikelCountAggregateOutputType | null
    _avg: ArtikelAvgAggregateOutputType | null
    _sum: ArtikelSumAggregateOutputType | null
    _min: ArtikelMinAggregateOutputType | null
    _max: ArtikelMaxAggregateOutputType | null
  }

  export type ArtikelAvgAggregateOutputType = {
    id: number | null
    applicationId: number | null
  }

  export type ArtikelSumAggregateOutputType = {
    id: number | null
    applicationId: number | null
  }

  export type ArtikelMinAggregateOutputType = {
    id: number | null
    applicationId: number | null
    title: string | null
    content: string | null
    image: string | null
    isDownloaded: $Enums.isDownloaded | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArtikelMaxAggregateOutputType = {
    id: number | null
    applicationId: number | null
    title: string | null
    content: string | null
    image: string | null
    isDownloaded: $Enums.isDownloaded | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArtikelCountAggregateOutputType = {
    id: number
    applicationId: number
    title: number
    content: number
    image: number
    isDownloaded: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ArtikelAvgAggregateInputType = {
    id?: true
    applicationId?: true
  }

  export type ArtikelSumAggregateInputType = {
    id?: true
    applicationId?: true
  }

  export type ArtikelMinAggregateInputType = {
    id?: true
    applicationId?: true
    title?: true
    content?: true
    image?: true
    isDownloaded?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArtikelMaxAggregateInputType = {
    id?: true
    applicationId?: true
    title?: true
    content?: true
    image?: true
    isDownloaded?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArtikelCountAggregateInputType = {
    id?: true
    applicationId?: true
    title?: true
    content?: true
    image?: true
    isDownloaded?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ArtikelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Artikel to aggregate.
     */
    where?: ArtikelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artikels to fetch.
     */
    orderBy?: ArtikelOrderByWithRelationInput | ArtikelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArtikelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artikels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artikels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Artikels
    **/
    _count?: true | ArtikelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtikelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtikelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtikelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtikelMaxAggregateInputType
  }

  export type GetArtikelAggregateType<T extends ArtikelAggregateArgs> = {
        [P in keyof T & keyof AggregateArtikel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtikel[P]>
      : GetScalarType<T[P], AggregateArtikel[P]>
  }




  export type ArtikelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtikelWhereInput
    orderBy?: ArtikelOrderByWithAggregationInput | ArtikelOrderByWithAggregationInput[]
    by: ArtikelScalarFieldEnum[] | ArtikelScalarFieldEnum
    having?: ArtikelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtikelCountAggregateInputType | true
    _avg?: ArtikelAvgAggregateInputType
    _sum?: ArtikelSumAggregateInputType
    _min?: ArtikelMinAggregateInputType
    _max?: ArtikelMaxAggregateInputType
  }

  export type ArtikelGroupByOutputType = {
    id: number
    applicationId: number
    title: string
    content: string
    image: string
    isDownloaded: $Enums.isDownloaded
    createdAt: Date
    updatedAt: Date
    _count: ArtikelCountAggregateOutputType | null
    _avg: ArtikelAvgAggregateOutputType | null
    _sum: ArtikelSumAggregateOutputType | null
    _min: ArtikelMinAggregateOutputType | null
    _max: ArtikelMaxAggregateOutputType | null
  }

  type GetArtikelGroupByPayload<T extends ArtikelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtikelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtikelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtikelGroupByOutputType[P]>
            : GetScalarType<T[P], ArtikelGroupByOutputType[P]>
        }
      >
    >


  export type ArtikelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    title?: boolean
    content?: boolean
    image?: boolean
    isDownloaded?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artikel"]>

  export type ArtikelSelectScalar = {
    id?: boolean
    applicationId?: boolean
    title?: boolean
    content?: boolean
    image?: boolean
    isDownloaded?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ArtikelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }


  export type $ArtikelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Artikel"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      applicationId: number
      title: string
      content: string
      image: string
      isDownloaded: $Enums.isDownloaded
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["artikel"]>
    composites: {}
  }


  type ArtikelGetPayload<S extends boolean | null | undefined | ArtikelDefaultArgs> = $Result.GetResult<Prisma.$ArtikelPayload, S>

  type ArtikelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ArtikelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArtikelCountAggregateInputType | true
    }

  export interface ArtikelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Artikel'], meta: { name: 'Artikel' } }
    /**
     * Find zero or one Artikel that matches the filter.
     * @param {ArtikelFindUniqueArgs} args - Arguments to find a Artikel
     * @example
     * // Get one Artikel
     * const artikel = await prisma.artikel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArtikelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ArtikelFindUniqueArgs<ExtArgs>>
    ): Prisma__ArtikelClient<$Result.GetResult<Prisma.$ArtikelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Artikel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ArtikelFindUniqueOrThrowArgs} args - Arguments to find a Artikel
     * @example
     * // Get one Artikel
     * const artikel = await prisma.artikel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArtikelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtikelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ArtikelClient<$Result.GetResult<Prisma.$ArtikelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Artikel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtikelFindFirstArgs} args - Arguments to find a Artikel
     * @example
     * // Get one Artikel
     * const artikel = await prisma.artikel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArtikelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtikelFindFirstArgs<ExtArgs>>
    ): Prisma__ArtikelClient<$Result.GetResult<Prisma.$ArtikelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Artikel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtikelFindFirstOrThrowArgs} args - Arguments to find a Artikel
     * @example
     * // Get one Artikel
     * const artikel = await prisma.artikel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArtikelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtikelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ArtikelClient<$Result.GetResult<Prisma.$ArtikelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Artikels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtikelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Artikels
     * const artikels = await prisma.artikel.findMany()
     * 
     * // Get first 10 Artikels
     * const artikels = await prisma.artikel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artikelWithIdOnly = await prisma.artikel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArtikelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtikelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtikelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Artikel.
     * @param {ArtikelCreateArgs} args - Arguments to create a Artikel.
     * @example
     * // Create one Artikel
     * const Artikel = await prisma.artikel.create({
     *   data: {
     *     // ... data to create a Artikel
     *   }
     * })
     * 
    **/
    create<T extends ArtikelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtikelCreateArgs<ExtArgs>>
    ): Prisma__ArtikelClient<$Result.GetResult<Prisma.$ArtikelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Artikels.
     *     @param {ArtikelCreateManyArgs} args - Arguments to create many Artikels.
     *     @example
     *     // Create many Artikels
     *     const artikel = await prisma.artikel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ArtikelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtikelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Artikel.
     * @param {ArtikelDeleteArgs} args - Arguments to delete one Artikel.
     * @example
     * // Delete one Artikel
     * const Artikel = await prisma.artikel.delete({
     *   where: {
     *     // ... filter to delete one Artikel
     *   }
     * })
     * 
    **/
    delete<T extends ArtikelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ArtikelDeleteArgs<ExtArgs>>
    ): Prisma__ArtikelClient<$Result.GetResult<Prisma.$ArtikelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Artikel.
     * @param {ArtikelUpdateArgs} args - Arguments to update one Artikel.
     * @example
     * // Update one Artikel
     * const artikel = await prisma.artikel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArtikelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtikelUpdateArgs<ExtArgs>>
    ): Prisma__ArtikelClient<$Result.GetResult<Prisma.$ArtikelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Artikels.
     * @param {ArtikelDeleteManyArgs} args - Arguments to filter Artikels to delete.
     * @example
     * // Delete a few Artikels
     * const { count } = await prisma.artikel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArtikelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtikelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artikels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtikelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Artikels
     * const artikel = await prisma.artikel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArtikelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ArtikelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Artikel.
     * @param {ArtikelUpsertArgs} args - Arguments to update or create a Artikel.
     * @example
     * // Update or create a Artikel
     * const artikel = await prisma.artikel.upsert({
     *   create: {
     *     // ... data to create a Artikel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Artikel we want to update
     *   }
     * })
    **/
    upsert<T extends ArtikelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ArtikelUpsertArgs<ExtArgs>>
    ): Prisma__ArtikelClient<$Result.GetResult<Prisma.$ArtikelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Artikels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtikelCountArgs} args - Arguments to filter Artikels to count.
     * @example
     * // Count the number of Artikels
     * const count = await prisma.artikel.count({
     *   where: {
     *     // ... the filter for the Artikels we want to count
     *   }
     * })
    **/
    count<T extends ArtikelCountArgs>(
      args?: Subset<T, ArtikelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtikelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Artikel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtikelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtikelAggregateArgs>(args: Subset<T, ArtikelAggregateArgs>): Prisma.PrismaPromise<GetArtikelAggregateType<T>>

    /**
     * Group by Artikel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtikelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtikelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtikelGroupByArgs['orderBy'] }
        : { orderBy?: ArtikelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtikelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtikelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Artikel model
   */
  readonly fields: ArtikelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Artikel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArtikelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Artikel model
   */ 
  interface ArtikelFieldRefs {
    readonly id: FieldRef<"Artikel", 'Int'>
    readonly applicationId: FieldRef<"Artikel", 'Int'>
    readonly title: FieldRef<"Artikel", 'String'>
    readonly content: FieldRef<"Artikel", 'String'>
    readonly image: FieldRef<"Artikel", 'String'>
    readonly isDownloaded: FieldRef<"Artikel", 'isDownloaded'>
    readonly createdAt: FieldRef<"Artikel", 'DateTime'>
    readonly updatedAt: FieldRef<"Artikel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Artikel findUnique
   */
  export type ArtikelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artikel
     */
    select?: ArtikelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtikelInclude<ExtArgs> | null
    /**
     * Filter, which Artikel to fetch.
     */
    where: ArtikelWhereUniqueInput
  }


  /**
   * Artikel findUniqueOrThrow
   */
  export type ArtikelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artikel
     */
    select?: ArtikelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtikelInclude<ExtArgs> | null
    /**
     * Filter, which Artikel to fetch.
     */
    where: ArtikelWhereUniqueInput
  }


  /**
   * Artikel findFirst
   */
  export type ArtikelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artikel
     */
    select?: ArtikelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtikelInclude<ExtArgs> | null
    /**
     * Filter, which Artikel to fetch.
     */
    where?: ArtikelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artikels to fetch.
     */
    orderBy?: ArtikelOrderByWithRelationInput | ArtikelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Artikels.
     */
    cursor?: ArtikelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artikels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artikels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Artikels.
     */
    distinct?: ArtikelScalarFieldEnum | ArtikelScalarFieldEnum[]
  }


  /**
   * Artikel findFirstOrThrow
   */
  export type ArtikelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artikel
     */
    select?: ArtikelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtikelInclude<ExtArgs> | null
    /**
     * Filter, which Artikel to fetch.
     */
    where?: ArtikelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artikels to fetch.
     */
    orderBy?: ArtikelOrderByWithRelationInput | ArtikelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Artikels.
     */
    cursor?: ArtikelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artikels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artikels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Artikels.
     */
    distinct?: ArtikelScalarFieldEnum | ArtikelScalarFieldEnum[]
  }


  /**
   * Artikel findMany
   */
  export type ArtikelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artikel
     */
    select?: ArtikelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtikelInclude<ExtArgs> | null
    /**
     * Filter, which Artikels to fetch.
     */
    where?: ArtikelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artikels to fetch.
     */
    orderBy?: ArtikelOrderByWithRelationInput | ArtikelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Artikels.
     */
    cursor?: ArtikelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artikels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artikels.
     */
    skip?: number
    distinct?: ArtikelScalarFieldEnum | ArtikelScalarFieldEnum[]
  }


  /**
   * Artikel create
   */
  export type ArtikelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artikel
     */
    select?: ArtikelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtikelInclude<ExtArgs> | null
    /**
     * The data needed to create a Artikel.
     */
    data: XOR<ArtikelCreateInput, ArtikelUncheckedCreateInput>
  }


  /**
   * Artikel createMany
   */
  export type ArtikelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Artikels.
     */
    data: ArtikelCreateManyInput | ArtikelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Artikel update
   */
  export type ArtikelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artikel
     */
    select?: ArtikelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtikelInclude<ExtArgs> | null
    /**
     * The data needed to update a Artikel.
     */
    data: XOR<ArtikelUpdateInput, ArtikelUncheckedUpdateInput>
    /**
     * Choose, which Artikel to update.
     */
    where: ArtikelWhereUniqueInput
  }


  /**
   * Artikel updateMany
   */
  export type ArtikelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Artikels.
     */
    data: XOR<ArtikelUpdateManyMutationInput, ArtikelUncheckedUpdateManyInput>
    /**
     * Filter which Artikels to update
     */
    where?: ArtikelWhereInput
  }


  /**
   * Artikel upsert
   */
  export type ArtikelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artikel
     */
    select?: ArtikelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtikelInclude<ExtArgs> | null
    /**
     * The filter to search for the Artikel to update in case it exists.
     */
    where: ArtikelWhereUniqueInput
    /**
     * In case the Artikel found by the `where` argument doesn't exist, create a new Artikel with this data.
     */
    create: XOR<ArtikelCreateInput, ArtikelUncheckedCreateInput>
    /**
     * In case the Artikel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArtikelUpdateInput, ArtikelUncheckedUpdateInput>
  }


  /**
   * Artikel delete
   */
  export type ArtikelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artikel
     */
    select?: ArtikelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtikelInclude<ExtArgs> | null
    /**
     * Filter which Artikel to delete.
     */
    where: ArtikelWhereUniqueInput
  }


  /**
   * Artikel deleteMany
   */
  export type ArtikelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Artikels to delete
     */
    where?: ArtikelWhereInput
  }


  /**
   * Artikel without action
   */
  export type ArtikelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artikel
     */
    select?: ArtikelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtikelInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ApplicationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ApplicationScalarFieldEnum = (typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum]


  export const MetaAiScalarFieldEnum: {
    id: 'id',
    type: 'type',
    keyword: 'keyword',
    applicationId: 'applicationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MetaAiScalarFieldEnum = (typeof MetaAiScalarFieldEnum)[keyof typeof MetaAiScalarFieldEnum]


  export const ArtikelScalarFieldEnum: {
    id: 'id',
    applicationId: 'applicationId',
    title: 'title',
    content: 'content',
    image: 'image',
    isDownloaded: 'isDownloaded',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ArtikelScalarFieldEnum = (typeof ArtikelScalarFieldEnum)[keyof typeof ArtikelScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Type'
   */
  export type EnumTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Type'>
    


  /**
   * Reference to a field of type 'isDownloaded'
   */
  export type EnumisDownloadedFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'isDownloaded'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ApplicationWhereInput = {
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    id?: IntFilter<"Application"> | number
    name?: StringFilter<"Application"> | string
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    metaAis?: MetaAiListRelationFilter
    artikels?: ArtikelListRelationFilter
  }

  export type ApplicationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metaAis?: MetaAiOrderByRelationAggregateInput
    artikels?: ArtikelOrderByRelationAggregateInput
  }

  export type ApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    name?: StringFilter<"Application"> | string
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    metaAis?: MetaAiListRelationFilter
    artikels?: ArtikelListRelationFilter
  }, "id">

  export type ApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ApplicationCountOrderByAggregateInput
    _avg?: ApplicationAvgOrderByAggregateInput
    _max?: ApplicationMaxOrderByAggregateInput
    _min?: ApplicationMinOrderByAggregateInput
    _sum?: ApplicationSumOrderByAggregateInput
  }

  export type ApplicationScalarWhereWithAggregatesInput = {
    AND?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    OR?: ApplicationScalarWhereWithAggregatesInput[]
    NOT?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Application"> | number
    name?: StringWithAggregatesFilter<"Application"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
  }

  export type MetaAiWhereInput = {
    AND?: MetaAiWhereInput | MetaAiWhereInput[]
    OR?: MetaAiWhereInput[]
    NOT?: MetaAiWhereInput | MetaAiWhereInput[]
    id?: IntFilter<"MetaAi"> | number
    type?: EnumTypeFilter<"MetaAi"> | $Enums.Type
    keyword?: StringFilter<"MetaAi"> | string
    applicationId?: IntFilter<"MetaAi"> | number
    createdAt?: DateTimeFilter<"MetaAi"> | Date | string
    updatedAt?: DateTimeFilter<"MetaAi"> | Date | string
    application?: XOR<ApplicationRelationFilter, ApplicationWhereInput>
  }

  export type MetaAiOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    keyword?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    application?: ApplicationOrderByWithRelationInput
  }

  export type MetaAiWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MetaAiWhereInput | MetaAiWhereInput[]
    OR?: MetaAiWhereInput[]
    NOT?: MetaAiWhereInput | MetaAiWhereInput[]
    type?: EnumTypeFilter<"MetaAi"> | $Enums.Type
    keyword?: StringFilter<"MetaAi"> | string
    applicationId?: IntFilter<"MetaAi"> | number
    createdAt?: DateTimeFilter<"MetaAi"> | Date | string
    updatedAt?: DateTimeFilter<"MetaAi"> | Date | string
    application?: XOR<ApplicationRelationFilter, ApplicationWhereInput>
  }, "id">

  export type MetaAiOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    keyword?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MetaAiCountOrderByAggregateInput
    _avg?: MetaAiAvgOrderByAggregateInput
    _max?: MetaAiMaxOrderByAggregateInput
    _min?: MetaAiMinOrderByAggregateInput
    _sum?: MetaAiSumOrderByAggregateInput
  }

  export type MetaAiScalarWhereWithAggregatesInput = {
    AND?: MetaAiScalarWhereWithAggregatesInput | MetaAiScalarWhereWithAggregatesInput[]
    OR?: MetaAiScalarWhereWithAggregatesInput[]
    NOT?: MetaAiScalarWhereWithAggregatesInput | MetaAiScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MetaAi"> | number
    type?: EnumTypeWithAggregatesFilter<"MetaAi"> | $Enums.Type
    keyword?: StringWithAggregatesFilter<"MetaAi"> | string
    applicationId?: IntWithAggregatesFilter<"MetaAi"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MetaAi"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MetaAi"> | Date | string
  }

  export type ArtikelWhereInput = {
    AND?: ArtikelWhereInput | ArtikelWhereInput[]
    OR?: ArtikelWhereInput[]
    NOT?: ArtikelWhereInput | ArtikelWhereInput[]
    id?: IntFilter<"Artikel"> | number
    applicationId?: IntFilter<"Artikel"> | number
    title?: StringFilter<"Artikel"> | string
    content?: StringFilter<"Artikel"> | string
    image?: StringFilter<"Artikel"> | string
    isDownloaded?: EnumisDownloadedFilter<"Artikel"> | $Enums.isDownloaded
    createdAt?: DateTimeFilter<"Artikel"> | Date | string
    updatedAt?: DateTimeFilter<"Artikel"> | Date | string
    application?: XOR<ApplicationRelationFilter, ApplicationWhereInput>
  }

  export type ArtikelOrderByWithRelationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrder
    isDownloaded?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    application?: ApplicationOrderByWithRelationInput
  }

  export type ArtikelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ArtikelWhereInput | ArtikelWhereInput[]
    OR?: ArtikelWhereInput[]
    NOT?: ArtikelWhereInput | ArtikelWhereInput[]
    applicationId?: IntFilter<"Artikel"> | number
    title?: StringFilter<"Artikel"> | string
    content?: StringFilter<"Artikel"> | string
    image?: StringFilter<"Artikel"> | string
    isDownloaded?: EnumisDownloadedFilter<"Artikel"> | $Enums.isDownloaded
    createdAt?: DateTimeFilter<"Artikel"> | Date | string
    updatedAt?: DateTimeFilter<"Artikel"> | Date | string
    application?: XOR<ApplicationRelationFilter, ApplicationWhereInput>
  }, "id">

  export type ArtikelOrderByWithAggregationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrder
    isDownloaded?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ArtikelCountOrderByAggregateInput
    _avg?: ArtikelAvgOrderByAggregateInput
    _max?: ArtikelMaxOrderByAggregateInput
    _min?: ArtikelMinOrderByAggregateInput
    _sum?: ArtikelSumOrderByAggregateInput
  }

  export type ArtikelScalarWhereWithAggregatesInput = {
    AND?: ArtikelScalarWhereWithAggregatesInput | ArtikelScalarWhereWithAggregatesInput[]
    OR?: ArtikelScalarWhereWithAggregatesInput[]
    NOT?: ArtikelScalarWhereWithAggregatesInput | ArtikelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Artikel"> | number
    applicationId?: IntWithAggregatesFilter<"Artikel"> | number
    title?: StringWithAggregatesFilter<"Artikel"> | string
    content?: StringWithAggregatesFilter<"Artikel"> | string
    image?: StringWithAggregatesFilter<"Artikel"> | string
    isDownloaded?: EnumisDownloadedWithAggregatesFilter<"Artikel"> | $Enums.isDownloaded
    createdAt?: DateTimeWithAggregatesFilter<"Artikel"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Artikel"> | Date | string
  }

  export type ApplicationCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metaAis?: MetaAiCreateNestedManyWithoutApplicationInput
    artikels?: ArtikelCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metaAis?: MetaAiUncheckedCreateNestedManyWithoutApplicationInput
    artikels?: ArtikelUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metaAis?: MetaAiUpdateManyWithoutApplicationNestedInput
    artikels?: ArtikelUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metaAis?: MetaAiUncheckedUpdateManyWithoutApplicationNestedInput
    artikels?: ArtikelUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetaAiCreateInput = {
    type: $Enums.Type
    keyword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutMetaAisInput
  }

  export type MetaAiUncheckedCreateInput = {
    id?: number
    type: $Enums.Type
    keyword: string
    applicationId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MetaAiUpdateInput = {
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    keyword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutMetaAisNestedInput
  }

  export type MetaAiUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    keyword?: StringFieldUpdateOperationsInput | string
    applicationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetaAiCreateManyInput = {
    id?: number
    type: $Enums.Type
    keyword: string
    applicationId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MetaAiUpdateManyMutationInput = {
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    keyword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetaAiUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    keyword?: StringFieldUpdateOperationsInput | string
    applicationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtikelCreateInput = {
    title: string
    content: string
    image: string
    isDownloaded: $Enums.isDownloaded
    createdAt?: Date | string
    updatedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutArtikelsInput
  }

  export type ArtikelUncheckedCreateInput = {
    id?: number
    applicationId: number
    title: string
    content: string
    image: string
    isDownloaded: $Enums.isDownloaded
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArtikelUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isDownloaded?: EnumisDownloadedFieldUpdateOperationsInput | $Enums.isDownloaded
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutArtikelsNestedInput
  }

  export type ArtikelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isDownloaded?: EnumisDownloadedFieldUpdateOperationsInput | $Enums.isDownloaded
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtikelCreateManyInput = {
    id?: number
    applicationId: number
    title: string
    content: string
    image: string
    isDownloaded: $Enums.isDownloaded
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArtikelUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isDownloaded?: EnumisDownloadedFieldUpdateOperationsInput | $Enums.isDownloaded
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtikelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isDownloaded?: EnumisDownloadedFieldUpdateOperationsInput | $Enums.isDownloaded
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MetaAiListRelationFilter = {
    every?: MetaAiWhereInput
    some?: MetaAiWhereInput
    none?: MetaAiWhereInput
  }

  export type ArtikelListRelationFilter = {
    every?: ArtikelWhereInput
    some?: ArtikelWhereInput
    none?: ArtikelWhereInput
  }

  export type MetaAiOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArtikelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[]
    notIn?: $Enums.Type[]
    not?: NestedEnumTypeFilter<$PrismaModel> | $Enums.Type
  }

  export type ApplicationRelationFilter = {
    is?: ApplicationWhereInput
    isNot?: ApplicationWhereInput
  }

  export type MetaAiCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    keyword?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetaAiAvgOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
  }

  export type MetaAiMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    keyword?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetaAiMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    keyword?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetaAiSumOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
  }

  export type EnumTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[]
    notIn?: $Enums.Type[]
    not?: NestedEnumTypeWithAggregatesFilter<$PrismaModel> | $Enums.Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeFilter<$PrismaModel>
    _max?: NestedEnumTypeFilter<$PrismaModel>
  }

  export type EnumisDownloadedFilter<$PrismaModel = never> = {
    equals?: $Enums.isDownloaded | EnumisDownloadedFieldRefInput<$PrismaModel>
    in?: $Enums.isDownloaded[]
    notIn?: $Enums.isDownloaded[]
    not?: NestedEnumisDownloadedFilter<$PrismaModel> | $Enums.isDownloaded
  }

  export type ArtikelCountOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrder
    isDownloaded?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArtikelAvgOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
  }

  export type ArtikelMaxOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrder
    isDownloaded?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArtikelMinOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    image?: SortOrder
    isDownloaded?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArtikelSumOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
  }

  export type EnumisDownloadedWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.isDownloaded | EnumisDownloadedFieldRefInput<$PrismaModel>
    in?: $Enums.isDownloaded[]
    notIn?: $Enums.isDownloaded[]
    not?: NestedEnumisDownloadedWithAggregatesFilter<$PrismaModel> | $Enums.isDownloaded
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumisDownloadedFilter<$PrismaModel>
    _max?: NestedEnumisDownloadedFilter<$PrismaModel>
  }

  export type MetaAiCreateNestedManyWithoutApplicationInput = {
    create?: XOR<MetaAiCreateWithoutApplicationInput, MetaAiUncheckedCreateWithoutApplicationInput> | MetaAiCreateWithoutApplicationInput[] | MetaAiUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: MetaAiCreateOrConnectWithoutApplicationInput | MetaAiCreateOrConnectWithoutApplicationInput[]
    createMany?: MetaAiCreateManyApplicationInputEnvelope
    connect?: MetaAiWhereUniqueInput | MetaAiWhereUniqueInput[]
  }

  export type ArtikelCreateNestedManyWithoutApplicationInput = {
    create?: XOR<ArtikelCreateWithoutApplicationInput, ArtikelUncheckedCreateWithoutApplicationInput> | ArtikelCreateWithoutApplicationInput[] | ArtikelUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ArtikelCreateOrConnectWithoutApplicationInput | ArtikelCreateOrConnectWithoutApplicationInput[]
    createMany?: ArtikelCreateManyApplicationInputEnvelope
    connect?: ArtikelWhereUniqueInput | ArtikelWhereUniqueInput[]
  }

  export type MetaAiUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<MetaAiCreateWithoutApplicationInput, MetaAiUncheckedCreateWithoutApplicationInput> | MetaAiCreateWithoutApplicationInput[] | MetaAiUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: MetaAiCreateOrConnectWithoutApplicationInput | MetaAiCreateOrConnectWithoutApplicationInput[]
    createMany?: MetaAiCreateManyApplicationInputEnvelope
    connect?: MetaAiWhereUniqueInput | MetaAiWhereUniqueInput[]
  }

  export type ArtikelUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<ArtikelCreateWithoutApplicationInput, ArtikelUncheckedCreateWithoutApplicationInput> | ArtikelCreateWithoutApplicationInput[] | ArtikelUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ArtikelCreateOrConnectWithoutApplicationInput | ArtikelCreateOrConnectWithoutApplicationInput[]
    createMany?: ArtikelCreateManyApplicationInputEnvelope
    connect?: ArtikelWhereUniqueInput | ArtikelWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MetaAiUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<MetaAiCreateWithoutApplicationInput, MetaAiUncheckedCreateWithoutApplicationInput> | MetaAiCreateWithoutApplicationInput[] | MetaAiUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: MetaAiCreateOrConnectWithoutApplicationInput | MetaAiCreateOrConnectWithoutApplicationInput[]
    upsert?: MetaAiUpsertWithWhereUniqueWithoutApplicationInput | MetaAiUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: MetaAiCreateManyApplicationInputEnvelope
    set?: MetaAiWhereUniqueInput | MetaAiWhereUniqueInput[]
    disconnect?: MetaAiWhereUniqueInput | MetaAiWhereUniqueInput[]
    delete?: MetaAiWhereUniqueInput | MetaAiWhereUniqueInput[]
    connect?: MetaAiWhereUniqueInput | MetaAiWhereUniqueInput[]
    update?: MetaAiUpdateWithWhereUniqueWithoutApplicationInput | MetaAiUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: MetaAiUpdateManyWithWhereWithoutApplicationInput | MetaAiUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: MetaAiScalarWhereInput | MetaAiScalarWhereInput[]
  }

  export type ArtikelUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<ArtikelCreateWithoutApplicationInput, ArtikelUncheckedCreateWithoutApplicationInput> | ArtikelCreateWithoutApplicationInput[] | ArtikelUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ArtikelCreateOrConnectWithoutApplicationInput | ArtikelCreateOrConnectWithoutApplicationInput[]
    upsert?: ArtikelUpsertWithWhereUniqueWithoutApplicationInput | ArtikelUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: ArtikelCreateManyApplicationInputEnvelope
    set?: ArtikelWhereUniqueInput | ArtikelWhereUniqueInput[]
    disconnect?: ArtikelWhereUniqueInput | ArtikelWhereUniqueInput[]
    delete?: ArtikelWhereUniqueInput | ArtikelWhereUniqueInput[]
    connect?: ArtikelWhereUniqueInput | ArtikelWhereUniqueInput[]
    update?: ArtikelUpdateWithWhereUniqueWithoutApplicationInput | ArtikelUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: ArtikelUpdateManyWithWhereWithoutApplicationInput | ArtikelUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: ArtikelScalarWhereInput | ArtikelScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MetaAiUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<MetaAiCreateWithoutApplicationInput, MetaAiUncheckedCreateWithoutApplicationInput> | MetaAiCreateWithoutApplicationInput[] | MetaAiUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: MetaAiCreateOrConnectWithoutApplicationInput | MetaAiCreateOrConnectWithoutApplicationInput[]
    upsert?: MetaAiUpsertWithWhereUniqueWithoutApplicationInput | MetaAiUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: MetaAiCreateManyApplicationInputEnvelope
    set?: MetaAiWhereUniqueInput | MetaAiWhereUniqueInput[]
    disconnect?: MetaAiWhereUniqueInput | MetaAiWhereUniqueInput[]
    delete?: MetaAiWhereUniqueInput | MetaAiWhereUniqueInput[]
    connect?: MetaAiWhereUniqueInput | MetaAiWhereUniqueInput[]
    update?: MetaAiUpdateWithWhereUniqueWithoutApplicationInput | MetaAiUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: MetaAiUpdateManyWithWhereWithoutApplicationInput | MetaAiUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: MetaAiScalarWhereInput | MetaAiScalarWhereInput[]
  }

  export type ArtikelUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<ArtikelCreateWithoutApplicationInput, ArtikelUncheckedCreateWithoutApplicationInput> | ArtikelCreateWithoutApplicationInput[] | ArtikelUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ArtikelCreateOrConnectWithoutApplicationInput | ArtikelCreateOrConnectWithoutApplicationInput[]
    upsert?: ArtikelUpsertWithWhereUniqueWithoutApplicationInput | ArtikelUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: ArtikelCreateManyApplicationInputEnvelope
    set?: ArtikelWhereUniqueInput | ArtikelWhereUniqueInput[]
    disconnect?: ArtikelWhereUniqueInput | ArtikelWhereUniqueInput[]
    delete?: ArtikelWhereUniqueInput | ArtikelWhereUniqueInput[]
    connect?: ArtikelWhereUniqueInput | ArtikelWhereUniqueInput[]
    update?: ArtikelUpdateWithWhereUniqueWithoutApplicationInput | ArtikelUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: ArtikelUpdateManyWithWhereWithoutApplicationInput | ArtikelUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: ArtikelScalarWhereInput | ArtikelScalarWhereInput[]
  }

  export type ApplicationCreateNestedOneWithoutMetaAisInput = {
    create?: XOR<ApplicationCreateWithoutMetaAisInput, ApplicationUncheckedCreateWithoutMetaAisInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutMetaAisInput
    connect?: ApplicationWhereUniqueInput
  }

  export type EnumTypeFieldUpdateOperationsInput = {
    set?: $Enums.Type
  }

  export type ApplicationUpdateOneRequiredWithoutMetaAisNestedInput = {
    create?: XOR<ApplicationCreateWithoutMetaAisInput, ApplicationUncheckedCreateWithoutMetaAisInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutMetaAisInput
    upsert?: ApplicationUpsertWithoutMetaAisInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutMetaAisInput, ApplicationUpdateWithoutMetaAisInput>, ApplicationUncheckedUpdateWithoutMetaAisInput>
  }

  export type ApplicationCreateNestedOneWithoutArtikelsInput = {
    create?: XOR<ApplicationCreateWithoutArtikelsInput, ApplicationUncheckedCreateWithoutArtikelsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutArtikelsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type EnumisDownloadedFieldUpdateOperationsInput = {
    set?: $Enums.isDownloaded
  }

  export type ApplicationUpdateOneRequiredWithoutArtikelsNestedInput = {
    create?: XOR<ApplicationCreateWithoutArtikelsInput, ApplicationUncheckedCreateWithoutArtikelsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutArtikelsInput
    upsert?: ApplicationUpsertWithoutArtikelsInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutArtikelsInput, ApplicationUpdateWithoutArtikelsInput>, ApplicationUncheckedUpdateWithoutArtikelsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[]
    notIn?: $Enums.Type[]
    not?: NestedEnumTypeFilter<$PrismaModel> | $Enums.Type
  }

  export type NestedEnumTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[]
    notIn?: $Enums.Type[]
    not?: NestedEnumTypeWithAggregatesFilter<$PrismaModel> | $Enums.Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeFilter<$PrismaModel>
    _max?: NestedEnumTypeFilter<$PrismaModel>
  }

  export type NestedEnumisDownloadedFilter<$PrismaModel = never> = {
    equals?: $Enums.isDownloaded | EnumisDownloadedFieldRefInput<$PrismaModel>
    in?: $Enums.isDownloaded[]
    notIn?: $Enums.isDownloaded[]
    not?: NestedEnumisDownloadedFilter<$PrismaModel> | $Enums.isDownloaded
  }

  export type NestedEnumisDownloadedWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.isDownloaded | EnumisDownloadedFieldRefInput<$PrismaModel>
    in?: $Enums.isDownloaded[]
    notIn?: $Enums.isDownloaded[]
    not?: NestedEnumisDownloadedWithAggregatesFilter<$PrismaModel> | $Enums.isDownloaded
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumisDownloadedFilter<$PrismaModel>
    _max?: NestedEnumisDownloadedFilter<$PrismaModel>
  }

  export type MetaAiCreateWithoutApplicationInput = {
    type: $Enums.Type
    keyword: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MetaAiUncheckedCreateWithoutApplicationInput = {
    id?: number
    type: $Enums.Type
    keyword: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MetaAiCreateOrConnectWithoutApplicationInput = {
    where: MetaAiWhereUniqueInput
    create: XOR<MetaAiCreateWithoutApplicationInput, MetaAiUncheckedCreateWithoutApplicationInput>
  }

  export type MetaAiCreateManyApplicationInputEnvelope = {
    data: MetaAiCreateManyApplicationInput | MetaAiCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type ArtikelCreateWithoutApplicationInput = {
    title: string
    content: string
    image: string
    isDownloaded: $Enums.isDownloaded
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArtikelUncheckedCreateWithoutApplicationInput = {
    id?: number
    title: string
    content: string
    image: string
    isDownloaded: $Enums.isDownloaded
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArtikelCreateOrConnectWithoutApplicationInput = {
    where: ArtikelWhereUniqueInput
    create: XOR<ArtikelCreateWithoutApplicationInput, ArtikelUncheckedCreateWithoutApplicationInput>
  }

  export type ArtikelCreateManyApplicationInputEnvelope = {
    data: ArtikelCreateManyApplicationInput | ArtikelCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type MetaAiUpsertWithWhereUniqueWithoutApplicationInput = {
    where: MetaAiWhereUniqueInput
    update: XOR<MetaAiUpdateWithoutApplicationInput, MetaAiUncheckedUpdateWithoutApplicationInput>
    create: XOR<MetaAiCreateWithoutApplicationInput, MetaAiUncheckedCreateWithoutApplicationInput>
  }

  export type MetaAiUpdateWithWhereUniqueWithoutApplicationInput = {
    where: MetaAiWhereUniqueInput
    data: XOR<MetaAiUpdateWithoutApplicationInput, MetaAiUncheckedUpdateWithoutApplicationInput>
  }

  export type MetaAiUpdateManyWithWhereWithoutApplicationInput = {
    where: MetaAiScalarWhereInput
    data: XOR<MetaAiUpdateManyMutationInput, MetaAiUncheckedUpdateManyWithoutApplicationInput>
  }

  export type MetaAiScalarWhereInput = {
    AND?: MetaAiScalarWhereInput | MetaAiScalarWhereInput[]
    OR?: MetaAiScalarWhereInput[]
    NOT?: MetaAiScalarWhereInput | MetaAiScalarWhereInput[]
    id?: IntFilter<"MetaAi"> | number
    type?: EnumTypeFilter<"MetaAi"> | $Enums.Type
    keyword?: StringFilter<"MetaAi"> | string
    applicationId?: IntFilter<"MetaAi"> | number
    createdAt?: DateTimeFilter<"MetaAi"> | Date | string
    updatedAt?: DateTimeFilter<"MetaAi"> | Date | string
  }

  export type ArtikelUpsertWithWhereUniqueWithoutApplicationInput = {
    where: ArtikelWhereUniqueInput
    update: XOR<ArtikelUpdateWithoutApplicationInput, ArtikelUncheckedUpdateWithoutApplicationInput>
    create: XOR<ArtikelCreateWithoutApplicationInput, ArtikelUncheckedCreateWithoutApplicationInput>
  }

  export type ArtikelUpdateWithWhereUniqueWithoutApplicationInput = {
    where: ArtikelWhereUniqueInput
    data: XOR<ArtikelUpdateWithoutApplicationInput, ArtikelUncheckedUpdateWithoutApplicationInput>
  }

  export type ArtikelUpdateManyWithWhereWithoutApplicationInput = {
    where: ArtikelScalarWhereInput
    data: XOR<ArtikelUpdateManyMutationInput, ArtikelUncheckedUpdateManyWithoutApplicationInput>
  }

  export type ArtikelScalarWhereInput = {
    AND?: ArtikelScalarWhereInput | ArtikelScalarWhereInput[]
    OR?: ArtikelScalarWhereInput[]
    NOT?: ArtikelScalarWhereInput | ArtikelScalarWhereInput[]
    id?: IntFilter<"Artikel"> | number
    applicationId?: IntFilter<"Artikel"> | number
    title?: StringFilter<"Artikel"> | string
    content?: StringFilter<"Artikel"> | string
    image?: StringFilter<"Artikel"> | string
    isDownloaded?: EnumisDownloadedFilter<"Artikel"> | $Enums.isDownloaded
    createdAt?: DateTimeFilter<"Artikel"> | Date | string
    updatedAt?: DateTimeFilter<"Artikel"> | Date | string
  }

  export type ApplicationCreateWithoutMetaAisInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    artikels?: ArtikelCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutMetaAisInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    artikels?: ArtikelUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutMetaAisInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutMetaAisInput, ApplicationUncheckedCreateWithoutMetaAisInput>
  }

  export type ApplicationUpsertWithoutMetaAisInput = {
    update: XOR<ApplicationUpdateWithoutMetaAisInput, ApplicationUncheckedUpdateWithoutMetaAisInput>
    create: XOR<ApplicationCreateWithoutMetaAisInput, ApplicationUncheckedCreateWithoutMetaAisInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutMetaAisInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutMetaAisInput, ApplicationUncheckedUpdateWithoutMetaAisInput>
  }

  export type ApplicationUpdateWithoutMetaAisInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artikels?: ArtikelUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutMetaAisInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artikels?: ArtikelUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateWithoutArtikelsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metaAis?: MetaAiCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutArtikelsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metaAis?: MetaAiUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutArtikelsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutArtikelsInput, ApplicationUncheckedCreateWithoutArtikelsInput>
  }

  export type ApplicationUpsertWithoutArtikelsInput = {
    update: XOR<ApplicationUpdateWithoutArtikelsInput, ApplicationUncheckedUpdateWithoutArtikelsInput>
    create: XOR<ApplicationCreateWithoutArtikelsInput, ApplicationUncheckedCreateWithoutArtikelsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutArtikelsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutArtikelsInput, ApplicationUncheckedUpdateWithoutArtikelsInput>
  }

  export type ApplicationUpdateWithoutArtikelsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metaAis?: MetaAiUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutArtikelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metaAis?: MetaAiUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type MetaAiCreateManyApplicationInput = {
    id?: number
    type: $Enums.Type
    keyword: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArtikelCreateManyApplicationInput = {
    id?: number
    title: string
    content: string
    image: string
    isDownloaded: $Enums.isDownloaded
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MetaAiUpdateWithoutApplicationInput = {
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    keyword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetaAiUncheckedUpdateWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    keyword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetaAiUncheckedUpdateManyWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    keyword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtikelUpdateWithoutApplicationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isDownloaded?: EnumisDownloadedFieldUpdateOperationsInput | $Enums.isDownloaded
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtikelUncheckedUpdateWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isDownloaded?: EnumisDownloadedFieldUpdateOperationsInput | $Enums.isDownloaded
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtikelUncheckedUpdateManyWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isDownloaded?: EnumisDownloadedFieldUpdateOperationsInput | $Enums.isDownloaded
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ApplicationCountOutputTypeDefaultArgs instead
     */
    export type ApplicationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApplicationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApplicationDefaultArgs instead
     */
    export type ApplicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApplicationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MetaAiDefaultArgs instead
     */
    export type MetaAiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MetaAiDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArtikelDefaultArgs instead
     */
    export type ArtikelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArtikelDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}